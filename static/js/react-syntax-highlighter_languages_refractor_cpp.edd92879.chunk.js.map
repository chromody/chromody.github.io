{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_cpp.edd92879.chunk.js","mappings":"4HACA,IAAIA,EAAaC,EAAQ,MAIzB,SAASC,EAAIC,GACXA,EAAMC,SAASJ,GACd,SAAWG,GACV,IAAIE,EACF,osBACEC,EAAU,uCAAuCC,OAAOC,QAC1D,cACA,WACE,OAAOH,EAAQE,MACjB,IAEFJ,EAAMM,UAAUP,IAAMC,EAAMM,UAAUC,OAAO,IAAK,CAChD,aAAc,CACZ,CACEC,QAASC,OACP,gEAAgEL,OAAOC,QACrE,cACA,WACE,OAAOH,EAAQE,MACjB,KAGJM,YAAY,GAKd,iCAEA,oCAEA,kEAEFR,QAASA,EACTS,OAAQ,CACNH,QACE,iJACFI,QAAQ,GAEVC,SACE,yHACFC,QAAS,uBAEXd,EAAMM,UAAUS,aAAa,MAAO,SAAU,CAC5CC,OAAQ,CAENR,QAASC,OACP,2BAA2BL,OACzB,MACA,mDAAmDA,OACnD,IACA,kDAAkDA,OAAOC,QACvD,eACA,WACE,OAAOF,CACT,IAEF,KAEJO,YAAY,EACZE,QAAQ,EACRK,OAAQ,CACNC,OAAQ,eACRL,SAAU,IACVM,YAAa,OAGjB,aAAc,CACZX,QAAS,oCACTY,MAAO,SACPR,QAAQ,KAGZZ,EAAMM,UAAUS,aAAa,MAAO,UAAW,CAC7C,mBAAoB,CAClBP,QAAS,8DACTS,OAAQ,CACNI,SAAU,OACVC,QAAS,CACPd,QAAS,WACTY,MAAO,aACPH,OAAQjB,EAAMM,UAAUP,SAKhCC,EAAMM,UAAUS,aAAa,MAAO,WAAY,CAC9C,eAAgB,CACdP,QAAS,KACTY,MAAO,iBAGXpB,EAAMM,UAAUS,aAAa,MAAO,aAAc,CAGhD,cAAe,CACbP,QACE,6EACFE,YAAY,EACZE,QAAQ,EACRK,OAAQjB,EAAMM,UAAUC,OAAO,MAAO,CAAC,MAG3CP,EAAMM,UAAUS,aACd,SACA,eACA,CAEE,aAAc,2BAEhBf,EAAMM,UAAUP,IAAI,eAEvB,CA9GA,CA8GEC,EACL,CApHAgB,EAAOO,QAAUxB,EACjBA,EAAIyB,YAAc,MAClBzB,EAAI0B,QAAU,E,WCCd,SAASC,EAAE1B,GACTA,EAAMM,UAAUoB,EAAI1B,EAAMM,UAAUC,OAAO,QAAS,CAClDoB,QAAS,CACPnB,QACE,sEACFI,QAAQ,GAEVM,OAAQ,CAENV,QAAS,sCACTI,QAAQ,GAEV,aAAc,CACZJ,QACE,mFACFE,YAAY,GAEdR,QACE,oVACFmB,SAAU,wBACVV,OACE,oHACFE,SAAU,oDAEZb,EAAMM,UAAUS,aAAa,IAAK,SAAU,CAC1Ca,KAAM,CAEJpB,QAAS,2CACTI,QAAQ,KAGZZ,EAAMM,UAAUS,aAAa,IAAK,SAAU,CAC1Cc,MAAO,CAGLrB,QACE,4FACFE,YAAY,EACZE,QAAQ,EACRQ,MAAO,WACPH,OAAQ,CACNC,OAAQ,CACN,CAEEV,QAAS,2BACTE,YAAY,GAEdV,EAAMM,UAAUoB,EAAU,QAE5BE,KAAM5B,EAAMM,UAAUoB,EAAQ,KAC9BC,QAAS3B,EAAMM,UAAUoB,EAAW,QACpC,aAAc,CACZ,CACElB,QAAS,+BACTE,YAAY,GAEd,CACEF,QAAS,+BACTE,YAAY,EACZU,MAAO,aAIXU,UAAW,CACTtB,QAAS,gBACTE,YAAY,EACZU,MAAO,WAET,iBAAkB,KAClBD,YAAa,kBACbY,WAAY,CACVvB,QAAS,YACTS,OAAQjB,EAAMM,UAAUoB,OAKhC1B,EAAMM,UAAUS,aAAa,IAAK,WAAY,CAE5CiB,SACE,sIAEGhC,EAAMM,UAAUoB,EAAW,OACpC,CAtFAV,EAAOO,QAAUG,EACjBA,EAAEF,YAAc,IAChBE,EAAED,QAAU,E","sources":["../node_modules/refractor/lang/cpp.js","../node_modules/refractor/lang/c.js"],"sourcesContent":["'use strict'\nvar refractorC = require('./c.js')\nmodule.exports = cpp\ncpp.displayName = 'cpp'\ncpp.aliases = []\nfunction cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        }, // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:import|module)\\s+)/.source +\n            '(?:' + // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' + // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern:\n        /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    string: {\n      // https://en.cppreference.com/w/c/language/string_literal\n      pattern: /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"/,\n      greedy: true\n    },\n    'class-name': {\n      pattern:\n        /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword:\n      /\\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    number:\n      /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    char: {\n      // https://en.cppreference.com/w/c/language/character_constant\n      pattern: /'(?:\\\\(?:\\r\\n|[\\s\\S])|[^'\\\\\\r\\n]){0,32}'/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern:\n        /(^[\\t ]*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [\n          {\n            // highlight the path of the include statement as a string\n            pattern: /^(#\\s*include\\s*)<[^>]+>/,\n            lookbehind: true\n          },\n          Prism.languages.c['string']\n        ],\n        char: Prism.languages.c['char'],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n            lookbehind: true\n          },\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n            lookbehind: true,\n            alias: 'function'\n          }\n        ],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    }\n  })\n  Prism.languages.insertBefore('c', 'function', {\n    // highlight predefined macros as constants\n    constant:\n      /\\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n"],"names":["refractorC","require","cpp","Prism","register","keyword","modName","source","replace","languages","extend","pattern","RegExp","lookbehind","number","greedy","operator","boolean","insertBefore","module","inside","string","punctuation","alias","function","generic","exports","displayName","aliases","c","comment","char","macro","directive","expression","constant"],"sourceRoot":""}