{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_jsdoc.ab487885.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/typescript.js","../node_modules/refractor/lang/jsdoc.js","../node_modules/refractor/lang/javadoclike.js"],"sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }) // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    ) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n","'use strict'\nvar refractorJavadoclike = require('./javadoclike.js')\nvar refractorTypescript = require('./typescript.js')\nmodule.exports = jsdoc\njsdoc.displayName = 'jsdoc'\njsdoc.aliases = []\nfunction jsdoc(Prism) {\n  Prism.register(refractorJavadoclike)\n  Prism.register(refractorTypescript)\n  ;(function (Prism) {\n    var javascript = Prism.languages.javascript\n    var type = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})+\\}/.source\n    var parameterPrefix =\n      '(@(?:arg|argument|param|property)\\\\s+(?:' + type + '\\\\s+)?)'\n    Prism.languages.jsdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        // @param {string} foo - foo bar\n        pattern: RegExp(\n          parameterPrefix + /(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    })\n    Prism.languages.insertBefore('jsdoc', 'keyword', {\n      'optional-parameter': {\n        // @param {string} [baz.foo=\"bar\"] foo bar\n        pattern: RegExp(\n          parameterPrefix +\n            /\\[(?:(?!\\s)[$\\w\\xA0-\\uFFFF.])+(?:=[^[\\]]+)?\\](?=\\s|$)/.source\n        ),\n        lookbehind: true,\n        inside: {\n          parameter: {\n            pattern: /(^\\[)[$\\w\\xA0-\\uFFFF\\.]+/,\n            lookbehind: true,\n            inside: {\n              punctuation: /\\./\n            }\n          },\n          code: {\n            pattern: /(=)[\\s\\S]*(?=\\]$)/,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          },\n          punctuation: /[=[\\]]/\n        }\n      },\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\\s+(?:<TYPE>\\s+)?)[A-Z]\\w*(?:\\.[A-Z]\\w*)*/.source.replace(\n              /<TYPE>/g,\n              function () {\n                return type\n              }\n            )\n          ),\n          lookbehind: true,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        {\n          pattern: RegExp('(@[a-z]+\\\\s+)' + type),\n          lookbehind: true,\n          inside: {\n            string: javascript.string,\n            number: javascript.number,\n            boolean: javascript.boolean,\n            keyword: Prism.languages.typescript.keyword,\n            operator: /=>|\\.\\.\\.|[&|?:*]/,\n            punctuation: /[.,;=<>{}()[\\]]/\n          }\n        }\n      ],\n      example: {\n        pattern:\n          /(@example\\s+(?!\\s))(?:[^@\\s]|\\s+(?!\\s))+?(?=\\s*(?:\\*\\s*)?(?:@\\w|\\*\\/))/,\n        lookbehind: true,\n        inside: {\n          code: {\n            pattern: /^([\\t ]*(?:\\*\\s*)?)\\S.*$/m,\n            lookbehind: true,\n            inside: javascript,\n            alias: 'language-javascript'\n          }\n        }\n      }\n    })\n    Prism.languages.javadoclike.addSupport('javascript', Prism.languages.jsdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n"],"names":["typescript","Prism","languages","extend","pattern","lookbehind","greedy","inside","builtin","keyword","push","typeInside","insertBefore","decorator","at","alias","function","generic","ts","module","exports","displayName","aliases","refractorJavadoclike","require","refractorTypescript","jsdoc","register","javascript","type","source","parameterPrefix","parameter","RegExp","punctuation","code","replace","string","number","boolean","operator","example","javadoclike","addSupport","javaDocLike","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","Array","isArray","i","l","length","docCommentSupport","rest"],"sourceRoot":""}