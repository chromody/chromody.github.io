{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_phpdoc.738b2e3c.chunk.js","mappings":"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","sources":["../node_modules/refractor/lang/javadoclike.js","../node_modules/refractor/lang/php.js","../node_modules/refractor/lang/phpdoc.js","../node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\n\nmodule.exports = javadoclike\njavadoclike.displayName = 'javadoclike'\njavadoclike.aliases = []\nfunction javadoclike(Prism) {\n  ;(function (Prism) {\n    var javaDocLike = (Prism.languages.javadoclike = {\n      parameter: {\n        pattern:\n          /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*@(?:arg|arguments|param)\\s+)\\w+/m,\n        lookbehind: true\n      },\n      keyword: {\n        // keywords are the first word in a line preceded be an `@` or surrounded by curly braces.\n        // @word, {@word}\n        pattern: /(^[\\t ]*(?:\\/{3}|\\*|\\/\\*\\*)\\s*|\\{)@[a-z][a-zA-Z-]+\\b/m,\n        lookbehind: true\n      },\n      punctuation: /[{}]/\n    })\n    /**\n     * Adds doc comment support to the given language and calls a given callback on each doc comment pattern.\n     *\n     * @param {string} lang the language add doc comment support to.\n     * @param {(pattern: {inside: {rest: undefined}}) => void} callback the function called with each doc comment pattern as argument.\n     */\n    function docCommentSupport(lang, callback) {\n      var tokenName = 'doc-comment'\n      var grammar = Prism.languages[lang]\n      if (!grammar) {\n        return\n      }\n      var token = grammar[tokenName]\n      if (!token) {\n        // add doc comment: /** */\n        var definition = {}\n        definition[tokenName] = {\n          pattern: /(^|[^\\\\])\\/\\*\\*[^/][\\s\\S]*?(?:\\*\\/|$)/,\n          lookbehind: true,\n          alias: 'comment'\n        }\n        grammar = Prism.languages.insertBefore(lang, 'comment', definition)\n        token = grammar[tokenName]\n      }\n      if (token instanceof RegExp) {\n        // convert regex to object\n        token = grammar[tokenName] = {\n          pattern: token\n        }\n      }\n      if (Array.isArray(token)) {\n        for (var i = 0, l = token.length; i < l; i++) {\n          if (token[i] instanceof RegExp) {\n            token[i] = {\n              pattern: token[i]\n            }\n          }\n          callback(token[i])\n        }\n      } else {\n        callback(token)\n      }\n    }\n    /**\n     * Adds doc-comment support to the given languages for the given documentation language.\n     *\n     * @param {string[]|string} languages\n     * @param {Object} docLanguage\n     */\n    function addSupport(languages, docLanguage) {\n      if (typeof languages === 'string') {\n        languages = [languages]\n      }\n      languages.forEach(function (lang) {\n        docCommentSupport(lang, function (pattern) {\n          if (!pattern.inside) {\n            pattern.inside = {}\n          }\n          pattern.inside.rest = docLanguage\n        })\n      })\n    }\n    Object.defineProperty(javaDocLike, 'addSupport', {\n      value: addSupport\n    })\n    javaDocLike.addSupport(['java', 'javascript', 'php'], javaDocLike)\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      {\n        pattern: /(::\\s*)\\b[a-z_]\\w*\\b(?!\\s*\\()/i,\n        greedy: true,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\b(?:case|const)\\s+)\\b[a-z_]\\w*(?=\\s*[;=])/i,\n        greedy: true,\n        lookbehind: true\n      },\n      /\\b(?:null)\\b/i,\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/\n    ]\n    var number =\n      /\\b0b[01]+(?:_[01]+)*\\b|\\b0o[0-7]+(?:_[0-7]+)*\\b|\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b|(?:\\b\\d+(?:_\\d+)*\\.?(?:\\d+(?:_\\d+)*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator =\n      /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?=\\{))/,\n      package: {\n        pattern:\n          /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      'class-name-definition': {\n        pattern: /(\\b(?:class|enum|interface|trait)\\s+)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        lookbehind: true,\n        alias: 'class-name'\n      },\n      'function-definition': {\n        pattern: /(\\bfunction\\s+)[a-z_]\\w*(?=\\s*\\()/i,\n        lookbehind: true,\n        alias: 'function'\n      },\n      keyword: [\n        {\n          pattern:\n            /(\\(\\s*)\\b(?:array|bool|boolean|float|int|integer|object|string)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /([(,?]\\s*)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:array(?!\\s*\\()|bool|callable|(?:false|null)(?=\\s*\\|)|float|int|iterable|mixed|object|self|static|string|void)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern:\n            /\\b(?:array(?!\\s*\\()|bool|float|int|iterable|mixed|object|string|void)\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:false|null)\\b|\\b(?:false|null)(?=\\s*\\|)/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          // yield from\n          pattern: /(\\byield\\s+)from\\b/i,\n          lookbehind: true\n        }, // `class` is always a keyword unlike other keywords\n        /\\bclass\\b/i,\n        {\n          // https://www.php.net/manual/en/reserved.keywords.php\n          //\n          // keywords cannot be preceded by \"->\"\n          // the complex lookbehind means `(?<!(?:->|::)\\s*)`\n          pattern:\n            /((?:^|[^\\s>:]|(?:^|[^-])>|(?:^|[^:]):)\\s*)\\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\\b/i,\n          lookbehind: true\n        }\n      ],\n      'argument-name': {\n        pattern: /([(,]\\s+)\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n        lookbehind: true\n      },\n      'class-name': [\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern:\n            /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: {\n        pattern: /(^|[^\\\\\\w])\\\\?[a-z_](?:[\\w\\\\]*\\w)?(?=\\s*\\()/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      property: {\n        pattern: /(->\\s*)\\w+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern:\n        /\\{\\$(?:\\{(?:\\{[^{}]+\\}|[^{}]+)\\}|[^{}])+\\}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)?)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern:\n          /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string,\n      attribute: {\n        pattern:\n          /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=\\]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|\\]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern =\n        /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorPhp = require('./php.js')\nvar refractorJavadoclike = require('./javadoclike.js')\nmodule.exports = phpdoc\nphpdoc.displayName = 'phpdoc'\nphpdoc.aliases = []\nfunction phpdoc(Prism) {\n  Prism.register(refractorPhp)\n  Prism.register(refractorJavadoclike)\n  ;(function (Prism) {\n    var typeExpression = /(?:\\b[a-zA-Z]\\w*|[|\\\\[\\]])+/.source\n    Prism.languages.phpdoc = Prism.languages.extend('javadoclike', {\n      parameter: {\n        pattern: RegExp(\n          '(@(?:global|param|property(?:-read|-write)?|var)\\\\s+(?:' +\n            typeExpression +\n            '\\\\s+)?)\\\\$\\\\w+'\n        ),\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('phpdoc', 'keyword', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            '(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\\\s+)' +\n              typeExpression\n          ),\n          lookbehind: true,\n          inside: {\n            keyword:\n              /\\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\\b/,\n            punctuation: /[|\\\\[\\]()]/\n          }\n        }\n      ]\n    })\n    Prism.languages.javadoclike.addSupport('php', Prism.languages.phpdoc)\n  })(Prism)\n}\n","'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"names":["javadoclike","Prism","javaDocLike","languages","parameter","pattern","lookbehind","keyword","punctuation","Object","defineProperty","value","docLanguage","forEach","lang","callback","tokenName","grammar","token","definition","alias","insertBefore","RegExp","Array","isArray","i","l","length","docCommentSupport","inside","rest","addSupport","module","exports","displayName","aliases","refractorMarkupTemplating","require","php","register","comment","constant","greedy","number","operator","delimiter","variable","package","function","property","string_interpolation","string","interpolation","attribute","hooks","add","env","test","code","buildPlaceholders","tokenizePlaceholders","refractorPhp","refractorJavadoclike","phpdoc","typeExpression","source","extend","markupTemplating","getPlaceholder","language","index","toUpperCase","defineProperties","placeholderPattern","replaceFilter","tokenStack","replace","match","placeholder","indexOf","markup","j","keys","walkTokens","tokens","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat"],"sourceRoot":""}